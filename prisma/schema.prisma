generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String               @id @default(cuid())
  email                 String               @unique
  name                  String?
  image                 String?
  password              String?
  role                  String               @default("USER")
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  lastLoginAt           DateTime?
  lockedUntil           DateTime?
  loginAttempts         Int                  @default(0)
  emailVerified         DateTime?
  onboardingCompleted   Boolean              @default(false)
  onboardingCompletedAt DateTime?
  accounts                  Account[]
  adminAuditLogs            AdminAuditLog[]
  apiKeys                   ApiKey[]
  billingHistory            BillingHistory[]
  chatParticipants          ChatParticipant[]
  emailVerificationTokens   EmailVerificationToken[]
  messageStatuses           MessageStatus[]
  messages                  Message[]
  orders                    Order[]
  passwordResetTokens       PasswordResetToken[]
  pointsBalance             PointsBalance?
  pointsHistory             PointsHistory[]
  reviews                   Review[]
  rolloverRecords           RolloverRecord[]
  sessions                  Session[]
  subscriptions             Subscription[]
  supportTickets            SupportTicket[]
  assignedTickets           SupportTicket[]      @relation("AssignedTickets")
  ticketResponses           TicketResponse[]
  teamMemberships           TeamMembership[]     @relation("TeamMemberships")
  ownedTeams                Team[]               @relation("OwnedTeams")

  // RBAC
  roles                     UserRole[]

  // Dual-control approvals
  approvalRequestsRequested ApprovalRequest[]   @relation("RequestedBy")
  approvalRequestsApproved  ApprovalRequest[]   @relation("ApprovedBy")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model SubscriptionPlan {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String?
  price         Float
  currency      String         @default("USD")
  points        Int
  rolloverLimit Int
  billingCycle  String         @default("MONTHLY") // MONTHLY, YEARLY
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id                   String           @id @default(cuid())
  userId               String
  planId               String
  stripeCustomerId     String?          @unique
  stripeSubscriptionId String?          @unique
  status               String           @default("ACTIVE") // ACTIVE, CANCELED, PAST_DUE, INCOMPLETE
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  nextBillingDate      DateTime?
  cancelAtPeriodEnd    Boolean          @default(false)
  canceledAt           DateTime?
  trialEndsAt          DateTime?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  plan                 SubscriptionPlan @relation(fields: [planId], references: [id])
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingHistory       BillingHistory[]

  @@map("subscriptions")
  @@index([userId])
  @@index([status])
}

model BillingHistory {
  id                String    @id @default(cuid())
  userId            String
  subscriptionId    String?
  amount            Float
  currency          String    @default("USD")
  status            String    // SUCCESS, FAILED, PENDING, REFUNDED
  description       String?
  stripeInvoiceId   String?
  stripePaymentId   String?
  billingDate       DateTime  @default(now())
  createdAt         DateTime  @default(now())
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription      Subscription? @relation(fields: [subscriptionId], references: [id])

  @@map("billing_history")
}

model PointsBalance {
  id             String    @id @default(cuid())
  userId         String?   @unique
  currentPoints  Int       @default(0)
  totalPurchased Int       @default(0)
  totalUsed      Int       @default(0)
  lastRollover   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  teamId         String?   @unique
  team           Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user           User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("points_balances")
}

model PointsHistory {
  id          String   @id @default(cuid())
  userId      String
  type        String
  amount      Int
  description String?
  orderId     String?
  createdAt   DateTime @default(now())
  order       Order?   @relation(fields: [orderId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("points_history")
  @@index([userId])
  @@index([createdAt])
  @@index([userId, createdAt])
}

model StockSite {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  cost        Float
  isActive    Boolean  @default(true)
  category    String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]

  @@map("stock_sites")
}

model Order {
  id            String          @id @default(cuid())
  userId        String
  stockSiteId   String
  stockItemId   String
  stockItemUrl  String?
  imageUrl      String?
  title         String?
  cost          Float
  status        String          @default("PENDING")
  taskId        String?
  downloadUrl   String?
  fileName      String?
  fileSize      Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  stockSite     StockSite       @relation(fields: [stockSiteId], references: [id])
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  pointsHistory PointsHistory[]

  @@map("orders")
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([userId, createdAt])
}

model ApiKey {
  id        String    @id @default(cuid())
  userId    String
  key       String    @unique
  isActive  Boolean   @default(true)
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
  @@index([userId])
  @@index([isActive])
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model AdminSetting {
  id          String   @id @default(cuid())
  category    String
  key         String   @unique
  value       String
  type        String   @default("string")
  description String?
  isEncrypted Boolean  @default(false)
  isRequired  Boolean  @default(false)
  validation  String?
  options     String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@map("admin_settings")
}

model AdminAuditLog {
  id           String   @id @default(cuid())
  adminId      String
  action       String
  resourceType String?
  resourceId   String?
  oldValues    String?
  newValues    String?
  // RBAC enrichment
  permission   String?
  reason       String?
  permissionSnapshot String?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  admin        User     @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([createdAt])
  @@map("admin_audit_logs")
}

model ApprovalRequest {
  id            String   @id @default(cuid())
  type          String   // POINTS_ADJUST, ORDER_REFUND
  resourceType  String   // user, order
  resourceId    String
  amount        Float?
  reason        String?
  status        String   @default("PENDING") // PENDING, APPROVED, REJECTED, CANCELED
  requestedById String
  approvedById  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  requestedBy   User     @relation("RequestedBy", fields: [requestedById], references: [id], onDelete: Cascade)
  approvedBy    User?    @relation("ApprovedBy", fields: [approvedById], references: [id])

  @@index([resourceType, resourceId])
  @@index([status])
  @@map("approval_requests")
}

// RBAC Models
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  // Relations
  users       UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  key         String   @unique // e.g., "orders.manage"
  description String?
  createdAt   DateTime @default(now())
  // Relations
  roles       RolePermission[]

  @@map("permissions")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

model FeatureFlag {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String?
  isEnabled         Boolean  @default(false)
  rolloutPercentage Int      @default(0)
  targetUsers       String?
  conditions        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("feature_flags")
}

model SystemHealth {
  id          String   @id @default(cuid())
  service     String   @unique
  status      String
  message     String?
  metrics     String?
  lastChecked DateTime @default(now())
  createdAt   DateTime @default(now())

  @@index([lastChecked])
  @@map("system_health")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  email     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  email     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model EmailResendTimer {
  id            String   @id @default(cuid())
  email         String   @unique
  lastSentAt    DateTime
  nextAllowedAt DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("email_resend_timers")
}

model Review {
  id           String   @id @default(cuid())
  userId       String
  displayName  String
  role         String
  industry     String
  title        String
  content      String
  rating       Int
  metrics      Json?
  isVerified   Boolean  @default(false)
  isApproved   Boolean  @default(false)
  isPublished  Boolean  @default(false)
  helpfulCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model SupportTicket {
  id             String   @id @default(cuid())
  ticketNumber   String   @unique
  subject        String
  category       String
  department     String   // general, sales, support, billing
  message        String
  priority       String   // low, medium, high, urgent
  status         String   @default("OPEN") // OPEN, IN_PROGRESS, RESOLVED, CLOSED
  userId         String
  userEmail      String
  userName       String?
  orderReference String?
  assignedTo     String?
  assignedToUser User?    @relation("AssignedTickets", fields: [assignedTo], references: [id])
  response       String?
  internalNotes  String?
  attachments    Json?    // Store file attachment metadata
  slaDueDate     DateTime?
  resolvedAt     DateTime?
  closedAt       DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses      TicketResponse[]

  @@map("support_tickets")
}

model TicketResponse {
  id          String        @id @default(cuid())
  ticketId    String
  userId      String
  userEmail   String
  userName    String?
  content     String
  isInternal  Boolean       @default(false) // Internal admin notes
  attachments Json?         // File attachment metadata
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ticket      SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ticket_responses")
}

model ChatRoom {
  id            String            @id @default(cuid())
  name          String?
  type          String            @default("SUPPORT")
  status        String            @default("ACTIVE")
  priority      String            @default("MEDIUM")
  lastMessageAt DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  participants  ChatParticipant[]
  messages      Message[]

  @@map("chat_rooms")
}

model ChatParticipant {
  id         String    @id @default(cuid())
  roomId     String
  userId     String
  role       String    @default("MEMBER")
  joinedAt   DateTime  @default(now())
  lastReadAt DateTime?
  room       ChatRoom  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("chat_participants")
}

model Message {
  id        String          @id @default(cuid())
  roomId    String
  userId    String
  content   String?
  type      String          @default("TEXT")
  fileUrl   String?
  fileName  String?
  fileSize  Int?
  replyToId String?
  isEdited  Boolean         @default(false)
  editedAt  DateTime?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  statuses  MessageStatus[]
  replyTo   Message?        @relation("MessageReply", fields: [replyToId], references: [id])
  replies   Message[]       @relation("MessageReply")
  room      ChatRoom        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model MessageStatus {
  id        String    @id @default(cuid())
  messageId String
  userId    String
  status    String    @default("SENT")
  readAt    DateTime?
  createdAt DateTime  @default(now())
  message   Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_statuses")
}

model PointPack {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  price         Float
  points        Int
  stripePriceId String   @unique
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("point_packs")
}

model RolloverRecord {
  id        String   @id @default(cuid())
  userId    String
  amount    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("rollover_records")
}

model Team {
  id            String           @id @default(cuid())
  name          String
  ownerId       String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  pointsBalance PointsBalance?
  members       TeamMembership[]
  owner         User             @relation("OwnedTeams", fields: [ownerId], references: [id])

  @@map("teams")
}

model TeamMembership {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      String   @default("MEMBER")
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation("TeamMemberships", fields: [userId], references: [id])

  @@unique([teamId, userId])
  @@map("team_memberships")
}
