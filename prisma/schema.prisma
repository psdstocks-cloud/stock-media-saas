// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Note: SQLite doesn't support enums, using String types instead

// User model for authentication and profile
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  password      String?   // Add password field
  role          String    @default("USER")
  emailVerified DateTime? // Email verification timestamp
  loginAttempts Int       @default(0)
  lockedUntil   DateTime?
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // OAuth fields
  accounts  Account[]
  sessions  Session[]

  // Relations
  subscriptions Subscription[]
  orders        Order[]
  pointsHistory PointsHistory[]
  apiKeys       ApiKey[]
  pointsBalance PointsBalance?
  passwordResetTokens PasswordResetToken[]
  reviews       Review[]
  supportTickets SupportTicket[]
  chatParticipants ChatParticipant[]
  messages      Message[]
  messageStatuses MessageStatus[]
  adminAuditLogs AdminAuditLog[]
  rolloverRecords RolloverRecord[]
  ownedTeams       Team[]             @relation("OwnedTeams")
  teamMemberships  TeamMembership[]   @relation("TeamMemberships")

  @@map("users")
}

// NextAuth.js OAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}


// Subscription plans
model SubscriptionPlan {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  price       Float   // Monthly price in USD
  points      Int     // Points included per month
  rolloverLimit Int   // Maximum points that can rollover (percentage of monthly points)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subscriptions Subscription[]

  @@map("subscription_plans")
}

// User subscriptions
model Subscription {
  id                String             @id @default(cuid())
  userId            String
  planId            String
  stripeCustomerId  String?            @unique
  stripeSubscriptionId String?         @unique
  status            String @default("ACTIVE")
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd Boolean            @default(false)
  canceledAt        DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relations
  user User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan SubscriptionPlan @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

// Points management
model PointsBalance {
  id              String   @id @default(cuid())
  userId          String?  @unique
  teamId          String?  @unique
  currentPoints   Int      @default(0)
  totalPurchased  Int      @default(0) // Total points ever purchased
  totalUsed       Int      @default(0) // Total points ever used
  lastRollover    DateTime? // Last time points were rolled over
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team? @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("points_balances")
}

// Points transaction history
model PointsHistory {
  id          String        @id @default(cuid())
  userId      String
  type        String
  amount      Int           // Positive for additions, negative for deductions
  description String?
  orderId     String?       // Reference to order if applicable
  createdAt   DateTime      @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id])

  @@map("points_history")
}

// Stock sites configuration
model StockSite {
  id          String  @id @default(cuid())
  name        String  @unique
  displayName String
  cost        Float   // Cost in points
  isActive    Boolean @default(true)
  category    String? // e.g., "photos", "videos", "music"
  icon        String? // Icon filename for the site
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("stock_sites")
}

// Orders for stock media downloads
model Order {
  id              String      @id @default(cuid())
  userId          String
  stockSiteId     String
  stockItemId     String      // ID from the stock site
  stockItemUrl    String?     // Original URL if provided
  imageUrl        String?     // Preview image URL from API
  title           String?
  cost            Float       // Points cost
  status          String @default("PENDING")
  taskId          String?     // Task ID from nehtw.com API
  downloadUrl     String?     // Final download URL
  fileName        String?
  fileSize        Int?        // File size in bytes
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  stockSite StockSite  @relation(fields: [stockSiteId], references: [id])
  pointsHistory PointsHistory[]

  @@map("orders")
}

// API keys for nehtw.com integration
model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  key       String   @unique
  isActive  Boolean  @default(true)
  lastUsed  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// System settings
model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

// Enhanced admin settings with categories
model AdminSetting {
  id          String   @id @default(cuid())
  category    String   // general, security, payment, email, etc.
  key         String   @unique
  value       String
  type        String   @default("string") // string, number, boolean, json, password
  description String?
  isEncrypted Boolean  @default(false)
  isRequired  Boolean  @default(false)
  validation  String?  // JSON validation rules
  options     String?  // JSON options for select/radio inputs
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("admin_settings")
  @@index([category])
}

// Admin audit logs for tracking all changes
model AdminAuditLog {
  id           String   @id @default(cuid())
  adminId      String
  action       String   // CREATE, UPDATE, DELETE, LOGIN, LOGOUT
  resourceType String?  // setting, user, order, etc.
  resourceId   String?
  oldValues    String?  // JSON
  newValues    String?  // JSON
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())

  // Relations
  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_audit_logs")
  @@index([adminId])
  @@index([createdAt])
}

// Feature flags for gradual rollouts
model FeatureFlag {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String?
  isEnabled         Boolean  @default(false)
  rolloutPercentage Int      @default(0) // 0-100
  targetUsers       String?  // JSON array of user IDs or conditions
  conditions        String?  // JSON conditions for enabling
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("feature_flags")
}

// System health monitoring
model SystemHealth {
  id          String   @id @default(cuid())
  service     String   @unique // database, api, payment, email, etc.
  status      String   // healthy, warning, critical, down
  message     String?
  metrics     String?  // JSON metrics data
  lastChecked DateTime @default(now())
  createdAt   DateTime @default(now())

  @@map("system_health")
  @@index([lastChecked])
}

// Password reset tokens for secure password recovery
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  email     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

// Email resend timers for rate limiting
model EmailResendTimer {
  id        String   @id @default(cuid())
  email     String
  lastSentAt DateTime
  nextAllowedAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email])
  @@map("email_resend_timers")
}

// Customer reviews for social proof
model Review {
  id           String   @id @default(cuid())
  userId       String
  displayName  String
  role         String
  industry     String
  title        String
  content      String
  rating       Int
  metrics      Json?
  isVerified   Boolean  @default(false)
  isApproved   Boolean  @default(false)
  isPublished  Boolean  @default(false)
  helpfulCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// Support tickets for customer service
model SupportTicket {
  id           String   @id @default(cuid())
  ticketNumber String   @unique
  subject      String
  category     String
  message      String   @db.Text
  priority     String   // LOW, MEDIUM, HIGH, URGENT
  status       String   @default("OPEN") // OPEN, IN_PROGRESS, RESOLVED, CLOSED
  userId       String
  userEmail    String
  assignedTo   String?
  response     String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_tickets")
}

// Chat system models
model ChatRoom {
  id          String   @id @default(cuid())
  name        String?
  type        String   @default("SUPPORT") // SUPPORT, GENERAL, ADMIN
  status      String   @default("ACTIVE") // ACTIVE, ARCHIVED, CLOSED
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  lastMessageAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  participants ChatParticipant[]
  messages     Message[]

  @@map("chat_rooms")
}

model ChatParticipant {
  id        String   @id @default(cuid())
  roomId    String
  userId    String
  role      String   @default("MEMBER") // MEMBER, ADMIN, MODERATOR
  joinedAt  DateTime @default(now())
  lastReadAt DateTime?

  // Relations
  room ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("chat_participants")
}

model Message {
  id          String   @id @default(cuid())
  roomId      String
  userId      String
  content     String?  @db.Text
  type        String   @default("TEXT") // TEXT, IMAGE, FILE, SYSTEM
  fileUrl     String?
  fileName    String?
  fileSize    Int?
  replyToId   String?
  isEdited    Boolean  @default(false)
  editedAt    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  room        ChatRoom     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  replyTo     Message?     @relation("MessageReply", fields: [replyToId], references: [id])
  replies     Message[]    @relation("MessageReply")
  statuses    MessageStatus[]

  @@map("messages")
}

model MessageStatus {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  status    String   @default("SENT") // SENT, DELIVERED, READ
  readAt    DateTime?
  createdAt DateTime @default(now())

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_statuses")
}

// Point packs for one-time purchases
model PointPack {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  price       Float    // Price in USD
  points      Int      // Number of points included
  stripePriceId String @unique // The Price ID from your Stripe account
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("point_packs")
}

// Stores records of points that have been rolled over for a user.
model RolloverRecord {
  id        String   @id @default(cuid())
  userId    String
  amount    Int
  expiresAt DateTime // The date when these specific points expire
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("rollover_records")
}

// Teams functionality for B2B customers
model Team {
  id        String   @id @default(cuid())
  name      String
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner    User              @relation("OwnedTeams", fields: [ownerId], references: [id])
  members  TeamMembership[]
  pointsBalance PointsBalance?
  
  @@map("teams")
}

model TeamMembership {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      String   @default("MEMBER") // e.g., ADMIN, MEMBER
  createdAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation("TeamMemberships", fields: [userId], references: [id])

  @@unique([teamId, userId])
  @@map("team_memberships")
}

